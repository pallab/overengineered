// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/words.proto

package words

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WordsClient is the client API for Words service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WordsClient interface {
	GetWords(ctx context.Context, in *GetWordsRequest, opts ...grpc.CallOption) (Words_GetWordsClient, error)
}

type wordsClient struct {
	cc grpc.ClientConnInterface
}

func NewWordsClient(cc grpc.ClientConnInterface) WordsClient {
	return &wordsClient{cc}
}

func (c *wordsClient) GetWords(ctx context.Context, in *GetWordsRequest, opts ...grpc.CallOption) (Words_GetWordsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Words_ServiceDesc.Streams[0], "/words_rpc.Words/GetWords", opts...)
	if err != nil {
		return nil, err
	}
	x := &wordsGetWordsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Words_GetWordsClient interface {
	Recv() (*GetWordsResponse, error)
	grpc.ClientStream
}

type wordsGetWordsClient struct {
	grpc.ClientStream
}

func (x *wordsGetWordsClient) Recv() (*GetWordsResponse, error) {
	m := new(GetWordsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WordsServer is the server API for Words service.
// All implementations must embed UnimplementedWordsServer
// for forward compatibility
type WordsServer interface {
	GetWords(*GetWordsRequest, Words_GetWordsServer) error
	mustEmbedUnimplementedWordsServer()
}

// UnimplementedWordsServer must be embedded to have forward compatible implementations.
type UnimplementedWordsServer struct {
}

func (UnimplementedWordsServer) GetWords(*GetWordsRequest, Words_GetWordsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetWords not implemented")
}
func (UnimplementedWordsServer) mustEmbedUnimplementedWordsServer() {}

// UnsafeWordsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WordsServer will
// result in compilation errors.
type UnsafeWordsServer interface {
	mustEmbedUnimplementedWordsServer()
}

func RegisterWordsServer(s grpc.ServiceRegistrar, srv WordsServer) {
	s.RegisterService(&Words_ServiceDesc, srv)
}

func _Words_GetWords_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetWordsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WordsServer).GetWords(m, &wordsGetWordsServer{stream})
}

type Words_GetWordsServer interface {
	Send(*GetWordsResponse) error
	grpc.ServerStream
}

type wordsGetWordsServer struct {
	grpc.ServerStream
}

func (x *wordsGetWordsServer) Send(m *GetWordsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Words_ServiceDesc is the grpc.ServiceDesc for Words service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Words_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "words_rpc.Words",
	HandlerType: (*WordsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetWords",
			Handler:       _Words_GetWords_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/words.proto",
}
