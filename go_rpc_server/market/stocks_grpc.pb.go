// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/stocks.proto

package market

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StockMarketClient is the client API for StockMarket service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StockMarketClient interface {
	ListStocks(ctx context.Context, in *ListStocksRequest, opts ...grpc.CallOption) (*ListStocksResponse, error)
	GetStockPrice(ctx context.Context, in *StockPriceRequest, opts ...grpc.CallOption) (StockMarket_GetStockPriceClient, error)
}

type stockMarketClient struct {
	cc grpc.ClientConnInterface
}

func NewStockMarketClient(cc grpc.ClientConnInterface) StockMarketClient {
	return &stockMarketClient{cc}
}

func (c *stockMarketClient) ListStocks(ctx context.Context, in *ListStocksRequest, opts ...grpc.CallOption) (*ListStocksResponse, error) {
	out := new(ListStocksResponse)
	err := c.cc.Invoke(ctx, "/stocks_rpc.StockMarket/ListStocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockMarketClient) GetStockPrice(ctx context.Context, in *StockPriceRequest, opts ...grpc.CallOption) (StockMarket_GetStockPriceClient, error) {
	stream, err := c.cc.NewStream(ctx, &StockMarket_ServiceDesc.Streams[0], "/stocks_rpc.StockMarket/GetStockPrice", opts...)
	if err != nil {
		return nil, err
	}
	x := &stockMarketGetStockPriceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StockMarket_GetStockPriceClient interface {
	Recv() (*StockPriceResponse, error)
	grpc.ClientStream
}

type stockMarketGetStockPriceClient struct {
	grpc.ClientStream
}

func (x *stockMarketGetStockPriceClient) Recv() (*StockPriceResponse, error) {
	m := new(StockPriceResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StockMarketServer is the server API for StockMarket service.
// All implementations must embed UnimplementedStockMarketServer
// for forward compatibility
type StockMarketServer interface {
	ListStocks(context.Context, *ListStocksRequest) (*ListStocksResponse, error)
	GetStockPrice(*StockPriceRequest, StockMarket_GetStockPriceServer) error
	mustEmbedUnimplementedStockMarketServer()
}

// UnimplementedStockMarketServer must be embedded to have forward compatible implementations.
type UnimplementedStockMarketServer struct {
}

func (UnimplementedStockMarketServer) ListStocks(context.Context, *ListStocksRequest) (*ListStocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStocks not implemented")
}
func (UnimplementedStockMarketServer) GetStockPrice(*StockPriceRequest, StockMarket_GetStockPriceServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStockPrice not implemented")
}
func (UnimplementedStockMarketServer) mustEmbedUnimplementedStockMarketServer() {}

// UnsafeStockMarketServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StockMarketServer will
// result in compilation errors.
type UnsafeStockMarketServer interface {
	mustEmbedUnimplementedStockMarketServer()
}

func RegisterStockMarketServer(s grpc.ServiceRegistrar, srv StockMarketServer) {
	s.RegisterService(&StockMarket_ServiceDesc, srv)
}

func _StockMarket_ListStocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockMarketServer).ListStocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stocks_rpc.StockMarket/ListStocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockMarketServer).ListStocks(ctx, req.(*ListStocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockMarket_GetStockPrice_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StockPriceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StockMarketServer).GetStockPrice(m, &stockMarketGetStockPriceServer{stream})
}

type StockMarket_GetStockPriceServer interface {
	Send(*StockPriceResponse) error
	grpc.ServerStream
}

type stockMarketGetStockPriceServer struct {
	grpc.ServerStream
}

func (x *stockMarketGetStockPriceServer) Send(m *StockPriceResponse) error {
	return x.ServerStream.SendMsg(m)
}

// StockMarket_ServiceDesc is the grpc.ServiceDesc for StockMarket service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StockMarket_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stocks_rpc.StockMarket",
	HandlerType: (*StockMarketServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListStocks",
			Handler:    _StockMarket_ListStocks_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetStockPrice",
			Handler:       _StockMarket_GetStockPrice_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/stocks.proto",
}
