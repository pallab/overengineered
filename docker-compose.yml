version: '3.3'

services:
  db:
    image: mysql:8
    command: --default-authentication-plugin=mysql_native_password
    environment:
      - MYSQL_ROOT_PASSWORD=passwdroot
      - MYSQL_DATABASE=overengineered
      - MYSQL_USER=tenxdev
      - MYSQL_PASSWORD=tenxpasswd
    networks:
      - backend
    ports:
      - 3306:3306
    volumes:
      - "./database/schema.sql:/docker-entrypoint-initdb.d/1.sql"
      - "./database/data.sql:/docker-entrypoint-initdb.d/3.sql"
    healthcheck:
      test: mysqladmin ping -h 127.0.0.1 -u tenxdev --password=tenxpasswd
      interval: 5s
      timeout: 5s
      retries: 55
  kafka:
    image: bitnami/kafka:3.4.0
    environment:
      - BITNAMI_DEBUG=yes
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
    networks:
      - backend
    ports:
      - 9094:9094
      - 9092:9092
    logging:
      driver: none
  grpc:
    image: rpc
    build:
      context: go_rpc_server
      dockerfile: Dockerfile
    environment:
      - BIND_ADDRESS=0.0.0.0:8089
    networks:
      - backend
    ports:
      - 8089:8089
  webserver:
    image: webserver
    build:
      context: webserver
      dockerfile: Dockerfile
    depends_on:
      db:
        condition: service_healthy
      grpc:
      kafka:
    environment:
      - DATABASE_URL=mysql://tenxdev:tenxpasswd@db:3306/overengineered
      - BIND_HOST=0.0.0.0
      - BIND_PORT=8080
      - RPC_ADDRESS=http://grpc:8089
      - KAFKA_SERVERS=kafka:9092
      - KAFKA_SOURCE=words
      - KAFKA_SINK=letter_counts
      - KAFKA_PARTITIONS=1
    networks:
      - backend
    ports:
      - 8080:8080
    healthcheck:
      test: curl localhost:8080
      interval: 1s
      timeout: 2s
      retries: 55
  streamer:
    image: streamer
    build:
      context: stream-processor
      dockerfile: Dockerfile
    depends_on:
      webserver:
        condition: service_healthy
    environment:
      - KAFKA_SERVER=kafka:9092
      - TOPIC_SOURCE=words
      - TOPIC_SINK=letter_counts
    networks:
      - backend


networks:
  frontend:
  backend: